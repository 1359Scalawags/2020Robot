// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANPIDController;
import com.revrobotics.CANSparkMax;
import com.revrobotics.ControlType;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;
import frc.robot.Constants.Climb;
import frc.robot.helper.CanMotor;
import edu.wpi.first.wpilibj.Servo;
import frc.robot.interfaces.scheduler;
//import edu.wpi.first.wpilibj.SpeedController;
//END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

public class ClimbSystem extends SubsystemBase { // implements scheduler{
    //private DigitalInput maxHeightLimit;
    private DigitalInput minHeightLimit;
    //public AnalogPotentiometer pot;

    private CANSparkMax climbMotor;
    private CANEncoder climbEncoder;
    private CANPIDController climbController;
    private boolean climberLocked;
    private Servo ratchet;
    private double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput;

    //private boolean ratchetLocked;

    public ClimbSystem() {

        //testing branch configuration

        minHeightLimit = new DigitalInput(Climb.MinHeightLimitID);
        addChild("MinHeightLimit",minHeightLimit);


        //set default PID values
        kP = Climb.P; 
        kI = Climb.I;
        kD = Climb.D; 
        kIz = Climb.Iz; 
        kFF = Climb.Ff; 
        kMaxOutput = Climb.MaxOut; 
        kMinOutput = Climb.MinOut;

        //create CAN motor
        climbMotor = new CANSparkMax(Climb.CANClimbMotorID, MotorType.kBrushless);
        climbMotor.restoreFactoryDefaults();
        //climbMotor.setInverted(true); 

        //capture encoder and controller

        climbEncoder = climbMotor.getEncoder();
        climbController = climbMotor.getPIDController();
        //climbEncoder.setPositionConversionFactor(Climb.CLIMBER_SCALE_TO_INCHES);


        climbController.setP(kP);
        climbController.setI(kI);
        climbController.setD(kD);
        climbController.setIZone(kIz);
        climbController.setFF(kFF);
        climbController.setOutputRange(kMinOutput, kMaxOutput);

        // display PID coefficients on SmartDashboard
        SmartDashboard.putNumber("P Gain", kP);
        SmartDashboard.putNumber("I Gain", kI);
        SmartDashboard.putNumber("D Gain", kD);
        SmartDashboard.putNumber("I Zone", kIz);
        SmartDashboard.putNumber("Feed Forward", kFF);
        SmartDashboard.putNumber("Max Output", kMaxOutput);
        SmartDashboard.putNumber("Min Output", kMinOutput);
        SmartDashboard.putNumber("Set Rotations", 0);


        
        climberLocked = true;
        //ratchetLocked = true;

        ratchet = new Servo(Climb.PWMRatchetServoID);
        addChild("ClimbRatchet", ratchet);

        ratchet.setPosition(Climb.RatchetClosed);
        
    }

    /**
     * The periodic method runs repeatedly during the Telop and Auto Modes (or during those modes in Practice Mode).
     */
    @Override
    public void periodic() {
        System.out.println("#####");
        // read PID coefficients from SmartDashboard
        double p = SmartDashboard.getNumber("P Gain", 0);
        double i = SmartDashboard.getNumber("I Gain", 0);
        double d = SmartDashboard.getNumber("D Gain", 0);
        double iz = SmartDashboard.getNumber("I Zone", 0);
        double ff = SmartDashboard.getNumber("Feed Forward", 0);
        double max = SmartDashboard.getNumber("Max Output", 0);
        double min = SmartDashboard.getNumber("Min Output", 0);
        double rotations = SmartDashboard.getNumber("Set Rotations", 0);

        // if PID coefficients on SmartDashboard have changed, write new values to controller
        if((p != kP)) { climbController.setP(p); kP = p; }
        if((i != kI)) { climbController.setI(i); kI = i; }
        if((d != kD)) { climbController.setD(d); kD = d; }
        if((iz != kIz)) { climbController.setIZone(iz); kIz = iz; }
        if((ff != kFF)) { climbController.setFF(ff); kFF = ff; }
        if((max != kMaxOutput) || (min != kMinOutput)) { 
            climbController.setOutputRange(min, max); 
            kMinOutput = min; kMaxOutput = max; 
        }

        /**
         * PIDController objects are commanded to a set point using the 
         * SetReference() method.
         * 
         * The first parameter is the value of the set point, whose units vary
         * depending on the control type set in the second parameter.
         * 
         * The second parameter is the control type can be set to one of four 
         * parameters:
         *  com.revrobotics.ControlType.kDutyCycle
         *  com.revrobotics.ControlType.kPosition
         *  com.revrobotics.ControlType.kVelocity
         *  com.revrobotics.ControlType.kVoltage
         */
        climbController.setReference(rotations, ControlType.kPosition);
        
        SmartDashboard.putNumber("SetPoint", rotations);
        SmartDashboard.putNumber("ClimbPosition", climbEncoder.getPosition());

    }


    /**
     * Allows drivers to use, lock, and unlock the Climber.
     */
    public void unlockClimber() {
        climberLocked = false;
    }

    public void unlockRatchet() {
        ratchet.setPosition(Climb.RatchetOpen);
        //ratchetLocked = false;
    }

    public void lockRatchet() {
        if(climbMotor.get() > 0) {
            climbMotor.set(0);
        }
        ratchet.setPosition(Climb.RatchetClosed);
        //ratchetLocked = true; 
    }

    public boolean isClimberLocked() {
        return climberLocked;
    }

    public boolean isRatchetLocked() {
        double difference = Math.abs(ratchet.get() - Climb.RatchetOpen);
        return difference > 0.25;
    }

    public boolean isAtTop() {
        return (climbEncoder.getPosition() >= Climb.MAX_CLIMB_POSITION);
    }

    public boolean isAtBottom() {
        return (minHeightLimit.get() == Climb.LIMIT_PRESSED);
    }

    public void stop() {
        climbMotor.set(0);
    }

    /**
     * 
     * @return Returns the position of climber in Inches
     */
    public double getPosition() {
        return this.climbEncoder.getPosition(); //com constant
    }

    public void resetPosition() {
        this.climbEncoder.setPosition(0);
    }

    /**
     * 
     * @param speed Positive numbers elevate...negative numbers climb.
     */
    public void move(double speed) {
        if (climberLocked) {
            climbMotor.set(0);
        } else {
            if (speed > 0) {
                if (!isAtTop() && !isRatchetLocked()) {
                    climbMotor.set(speed);
                } else {
                    climbMotor.set(0);
                }
            } else {
                if (minHeightLimit.get() == Climb.LIMIT_NOTPRESSED) {
                    climbMotor.set(speed);
                } else {
                    climbMotor.set(0);
                }
            }
        }
    }

    public void testMotor(double speed){
        climbMotor.set(speed);
    }

    // @Override
    // public void updateDash(boolean Override) {
    //     double motorClimbSpeed = climbMotor.get();
    //     double dashClimbSpeed = SmartDashboard.getNumber("CANClimbSpeed", 0);

    //     boolean RachetState = SmartDashboard.getBoolean("PWMRatchetState", false);
    //     if(Override){
    //         if(dashClimbSpeed != motorClimbSpeed)
    //             move(dashClimbSpeed);
    //         if(RachetState != isRatchetLocked()){
    //             if(RachetState)
    //                 lockRatchet();
    //             else
    //                 unlockRatchet();
    //         }
    //     }
    //     else{
    //         if(RachetState != isRatchetLocked())
    //             SmartDashboard.putBoolean("PWMRatchetState", isRatchetLocked());
    //         if(dashClimbSpeed != motorClimbSpeed)
    //             SmartDashboard.putNumber("CANClimbSpeed", motorClimbSpeed);
    //     }
    // }

    // @Override
    // public void putValues() {
    //     SmartDashboard.putBoolean("PWMRatchetState", isRatchetLocked());
    //     SmartDashboard.putNumber("CANClimbSpeed", climbMotor.get());
    // }
}