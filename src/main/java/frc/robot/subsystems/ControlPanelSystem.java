// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
//import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Spark;
//import edu.wpi.first.wpilibj.SpeedController;


/**
 *
 */
public class ControlPanelSystem extends SubsystemBase {

    private Spark rotateMotor;
    private Encoder rotateEncoder;
    private AnalogInput colorSensor;
    //private double testRotations;

    public ControlPanelSystem() {
        rotateMotor = new Spark(Constants.RotatoPotatoID);
        addChild("RotateMotor",rotateMotor);
        rotateMotor.setInverted(false);
        
        rotateEncoder = new Encoder(Constants.RotateEncoderAID, Constants.RotateEncoderBID, false, EncodingType.k4X);
        addChild("RotateEncoder",rotateEncoder);
        rotateEncoder.setDistancePerPulse(1.0);
        //rotateEncoder.setPIDSourceType(PIDSourceType.kRate);
                
        colorSensor = new AnalogInput(Constants.ColorSensorID);
        addChild("ColorSensor",colorSensor);
    }

    @Override
    public void periodic() {
        //Put code here to be run every loop
    }

    public void testSpin(double speed) {
        rotateMotor.set(speed);
    }

    public void stopTest() {
        rotateMotor.set(0);
    }

    public void resetTestRotations() {
        rotateEncoder.reset();
    }

    public double getTestRotations() {
        return rotateEncoder.get();
    }

}

