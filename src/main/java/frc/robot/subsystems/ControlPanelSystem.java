// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.util.Color;
import edu.wpi.first.wpilibj.Encoder;
//import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Spark;
//import edu.wpi.first.wpilibj.SpeedController;
// why is this not working?
import com.revrobotics.ColorSensorV3;
import com.revrobotics.ColorSensorV3.RawColor;


/**
 *
 */
public class ControlPanelSystem extends SubsystemBase {

    // TODO: Is this a NEO or brushed motor? Probably brushed.
    private Spark rotateMotor;
    private Encoder rotateEncoder;
<<<<<<< HEAD

    // TODO: Needs to be converted to REV sensor (look at the Pirate Dartboard)
    private AnalogInput colorSensor;
=======
>>>>>>> d1765a7cc46a66d6c7b67d3c59884b59f55898a5
    //private double testRotations;
    private final ColorSensorV3 colorSensor = new ColorSensorV3(Constants.COLORSENSOR_I2C);
    private Color prevColor;
    private String prevColorName;
    private Color currentColor;
    private String currentColorName;
    private int consistentCount;
    private int inconsistentCount;
    private double th =0.1;

    public ControlPanelSystem() {
        rotateMotor = new Spark(Constants.RotatoPotatoID);
        addChild("RotateMotor",rotateMotor);
        rotateMotor.setInverted(false);
        
        rotateEncoder = new Encoder(Constants.RotateEncoderAID, Constants.RotateEncoderBID, false, EncodingType.k4X);
        addChild("RotateEncoder",rotateEncoder);
        rotateEncoder.setDistancePerPulse(1.0);
        //rotateEncoder.setPIDSourceType(PIDSourceType.kRate);
                
        SmartDashboard.putString("Color Result", getColorName());
    }


<<<<<<< HEAD

    // TODO: Test methods can go bye bye
    
    public void testSpin(double speed) {
        rotateMotor.set(speed);
    }
=======
        public String getColorName(){
            // th = SmartDashboard.getNumber("Color thresh hold", th);
>>>>>>> d1765a7cc46a66d6c7b67d3c59884b59f55898a5

            prevColorName = currentColorName;
            getColor();

            double r = currentColor.red;
            double g = currentColor.green;
            double b = currentColor.blue;

            if(Math.abs(0.13489306 - r) <=th && Math.abs(0.43538037- g) <=th && Math.abs(0.42972437 -b) <=th)
                currentColorName = "Blue";
            else if(Math.abs(0.17530347 - r) <=th && Math.abs(0.5667771 - g) <=th && Math.abs(0.25793532 -b) <=th)
                currentColorName = "Green";
            else if(Math.abs(0.48934227 - r) <=th && Math.abs(0.36309862 - g) <=th && Math.abs(0.14753516 -b) <=th)
                currentColorName = "Red";
            else if(Math.abs(0.31467456 - r) <=th && Math.abs(0.5550923 - g) <=th && Math.abs(0.13020141 -b) <=th)
                currentColorName = "Yellow";
            else
                currentColorName = "not found";
            return currentColorName;
        }

        public Color getColor() {
            prevColor = currentColor;
            currentColor = colorSensor.getColor();
            return currentColor;
        }

        @Override
        public void periodic() {
            //Put code here to be run every loop
            getColorName();
        }

    }

<<<<<<< HEAD
    // TODO: Get the current color

    // TODO: Spin

    // TODO: Stop

}
=======
>>>>>>> d1765a7cc46a66d6c7b67d3c59884b59f55898a5

